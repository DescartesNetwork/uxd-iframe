{"version":3,"file":"static/js/src_app_bootstrap_app_tsx.8329cb7a.chunk.js","mappings":"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","sources":["app/static.app.tsx","shared/antd/embededView.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/index.ts","app/view/index.tsx","app/model/devTools.ts","app/model/main.controller.tsx","app/model/index.ts","app/bootstrap.app.tsx","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"logo\", {\n  enumerable: true,\n  get: function () {\n    return _logo.default;\n  }\n});\nexports.panels = void 0;\nObject.defineProperty(exports, \"readme\", {\n  enumerable: true,\n  get: function () {\n    return _README.default;\n  }\n});\n\nvar _panel = _interopRequireDefault(require(\"./static/images/panel1.png\"));\n\nvar _panel2 = _interopRequireDefault(require(\"./static/images/panel2.jpeg\"));\n\nvar _panel3 = _interopRequireDefault(require(\"./static/images/panel3.jpeg\"));\n\nvar _logo = _interopRequireDefault(require(\"./static/images/logo.png\"));\n\nvar _README = _interopRequireDefault(require(\"./static/docs/README.md\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst panels = [_panel.default, _panel2.default, _panel3.default];\nexports.panels = panels;","import { useEffect, useMemo } from 'react'\nimport { Gateway } from '@sentre/connector'\nimport { useUI } from '@senhub/providers'\n\nexport type EmbededViewProps = {\n  appId: string\n  src: string\n  title: string\n  background?: { light: string; dark: string }\n}\n\nconst EmbededView = ({ appId, src, title, background }: EmbededViewProps) => {\n  const { setBackground } = useUI()\n  // This trick is to avoid render loop if user directly pass in an object\n  const theme = useMemo(() => JSON.stringify(background), [background])\n  // Set theme\n  useEffect(() => {\n    if (theme) setBackground(JSON.parse(theme))\n  }, [setBackground, theme])\n  // Setup wallet gateway\n  useEffect(() => {\n    const gateway = new Gateway(window.sentre.wallet)\n    return gateway.terminate\n  }, [])\n\n  return (\n    <iframe\n      id={appId + '-iframe'}\n      src={src}\n      title={title}\n      style={{\n        height: 'calc(100vh - 64px)',\n        margin: -12,\n        marginTop: -24,\n        border: 'none',\n        width: '100vw',\n      }}\n      loading=\"lazy\"\n      allowFullScreen\n    />\n  )\n}\n\nexport default EmbededView\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import EmbededView from 'shared/antd/embededView'\n\nimport configs from 'app/configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nconst View = () => {\n  return (\n    <EmbededView\n      appId={appId}\n      src={'https://app.uxd.fi/'}\n      title=\"UXD: UXD is a decentralized stablecoin, backed 100% by delta neutral position.\"\n      background={{ light: '#000000', dark: '#000000' }}\n    />\n  )\n}\n\nexport default View\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    Buffer.isBuffer(val)\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'app/model/devTools'\n\nimport main from 'app/model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport { WalletProvider, UIProvider } from '@senhub/providers'\n\nimport View from 'app/view'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <WalletProvider>\n        <Provider store={model}>\n          <View />\n        </Provider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n\nexport * from 'app/static.app'\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n\n/**\n * RPC Node\n */\nconst CLUSTERS: Record<Net, string> = {\n  devnet:\n    env === 'development'\n      ? 'https://api.devnet.solana.com'\n      : 'https://devnet.genesysgo.net',\n  testnet: 'https://api.testnet.solana.com',\n  mainnet:\n    env === 'development'\n      ? 'https://api.mainnet-beta.solana.com'\n      : 'https://solitary-autumn-water.solana-mainnet.quiknode.pro/dcbac9d444818a20ac583541dec35b44c6840888/',\n}\nexport const rpc: string = CLUSTERS[net]\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["Object","defineProperty","exports","value","enumerable","get","_logo","default","_README","_panel","_interopRequireDefault","require","_panel2","_panel3","obj","__esModule","panels","appId","src","title","background","setBackground","useUI","theme","useMemo","JSON","stringify","useEffect","parse","Gateway","window","sentre","wallet","terminate","id","style","height","margin","marginTop","border","width","loading","allowFullScreen","shared","process","url","devnet","node","spltAddress","splataAddress","testnet","mainnet","manifest","development","staging","production","env","sol","net","configs","light","dark","BigInt","prototype","toJSON","this","toString","bigintSerializationMiddleware","serializableCheck","isSerializable","val","Array","isArray","proto","getPrototypeOf","isPlainObject","PublicKey","BN","Buffer","isBuffer","NAME","increaseCounter","createAsyncThunk","async","_","getState","main","counter","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","assign","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","WalletProvider","Provider","store","model","storage","getNetwork","chainId","getChainId","rpc","KEY","driver","localStorage","convert","e","set","key","data","getItem","setItem","clear"],"sourceRoot":""}